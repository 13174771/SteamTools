<?xml version="1.0" encoding="UTF-8" ?>
<Shell x:Class="System.Application.UI.AppShell"
       xmlns="http://xamarin.com/schemas/2014/forms"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:controls="clr-namespace:System.Application.UI.Views.Controls"
       xmlns:local="clr-namespace:System.Application.UI.Views"
       xmlns:resx="clr-namespace:System.Application.UI.Resx;assembly=System.Application.SteamTools.Client"
       xmlns:vm="clr-namespace:System.Application.UI.ViewModels;assembly=System.Application.SteamTools.Client"
       Title="Watt Toolkit"
       x:DataType="vm:MainWindowViewModel"
       FlyoutBehavior="Disabled"
       Visual="Material">
  <!--FlyoutBackgroundColor="{DynamicResource ShellBackgroundColor}"-->
  <!--FlyoutWidth="240"-->
  <!--ItemTemplate="{x:StaticResource AppShellFlyoutItemTemplate}"-->
  <!--MenuItemTemplate="{x:StaticResource AppShellFlyoutItemTemplate}"-->
  <!--
        The overall app visual hierarchy is defined here, along with navigation.
        
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

  <Shell.Resources>
    <ResourceDictionary>
      <Style TargetType="controls:TextBox">
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="TextColor" Value="{DynamicResource TextPrimary}" />
        <Setter Property="PlaceholderColor" Value="{DynamicResource TextSecondary}" />
      </Style>
      <Style TargetType="Button">
        <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
      </Style>
      <Style TargetType="controls:TextButton">
        <Setter Property="TextColor" Value="{StaticResource Primary}" />
      </Style>
      <Style TargetType="Label">
        <Setter Property="TextColor" Value="{DynamicResource TextPrimary}" />
      </Style>
      <Style x:Key="BaseStyle" TargetType="Element">
        <!-- BackgroundColor Toolbar 背景色 -->
        <Setter Property="Shell.BackgroundColor" Value="{DynamicResource ShellBackgroundColor}" />
        <!-- ForegroundColor Toolbar 左侧图标(箭头/三)与右侧图标(不包含更多...)颜色 -->
        <Setter Property="Shell.ForegroundColor" Value="{DynamicResource ShellTitleColor}" />
        <!-- ForegroundColor Toolbar 标题文本颜色 -->
        <Setter Property="Shell.TitleColor" Value="{DynamicResource ShellTitleColor}" />
        <Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
        <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
        <Setter Property="Shell.TabBarBackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="Shell.TabBarForegroundColor" Value="White" />
        <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF" />
        <Setter Property="Shell.TabBarTitleColor" Value="White" />
        <Setter Property="Shell.NavBarHasShadow" Value="false" />
      </Style>
      <Style BasedOn="{StaticResource BaseStyle}" TargetType="TabBar" />
      <Style BasedOn="{StaticResource BaseStyle}" TargetType="FlyoutItem" />
      <Style x:Key="LinkText" TargetType="Label">
        <Setter Property="TextDecorations" Value="Underline" />
        <Setter Property="TextColor" Value="{DynamicResource TextLink}" />
      </Style>
      <Style x:Key="PathIcon" TargetType="Path">
        <Setter Property="Aspect" Value="Uniform" />
        <Setter Property="Fill" Value="White" />
        <Setter Property="Stroke" Value="Transparent" />
        <Setter Property="StrokeThickness" Value="0" />
        <Setter Property="HeightRequest" Value="32" />
        <Setter Property="WidthRequest" Value="32" />
      </Style>
      <!--
                Default Styles for all Flyout Items
                https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
      <!--<Style Class="FlyoutItemLabelStyle" TargetType="Label">
        -->
      <!-- 左侧浮动菜单项文本(选中)时文字颜色 -->
      <!--
        <Setter Property="TextColor" Value="White" />
      </Style>-->
      <!--<Style TargetType="Image" Class="FlyoutItemImageStyle">
        <Setter Property="HeightRequest" Value="12" />
        <Setter Property="WidthRequest" Value="12" />
      </Style>-->
      <!--<Style Class="FlyoutItemLayoutStyle"
             ApplyToDerivedTypes="True"
             TargetType="Layout">
        <Setter Property="VisualStateManager.VisualStateGroups">
          <VisualStateGroupList>
            <VisualStateGroup x:Name="CommonStates">
              <VisualState x:Name="Normal">
                <VisualState.Setters>
                  <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=White}" />
                  -->
      <!-- 左侧浮动菜单项文本(未选中)时文字颜色 -->
      <!--
                  <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{DynamicResource ShellTitleColor}" />
                </VisualState.Setters>
              </VisualState>
              <VisualState x:Name="Selected">
                <VisualState.Setters>
                  -->
      <!-- 左侧浮动菜单项(选中)时背景 -->
      <!--
                  <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                </VisualState.Setters>
              </VisualState>
            </VisualStateGroup>
          </VisualStateGroupList>
        </Setter>
      </Style>-->

      <!--
                Custom Style you can apply to any Flyout Item
            -->
      <Style
                ApplyToDerivedTypes="True"
                Class="MenuItemLayoutStyle"
                TargetType="Layout">
        <Setter Property="VisualStateManager.VisualStateGroups">
          <VisualStateGroupList>
            <VisualStateGroup x:Name="CommonStates">
              <VisualState x:Name="Normal">
                <VisualState.Setters>
                  <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                </VisualState.Setters>
              </VisualState>
            </VisualStateGroup>
          </VisualStateGroupList>
        </Setter>
      </Style>
      <!--<DataTemplate x:Key="MenuItemAbout">
        <MenuItem Text="{x:Static resx:AppResources.About}"
                      IconImageSource="AboutPageViewModel" />
      </DataTemplate>
      <DataTemplate x:Key="MenuItemSettings">
        <MenuItem Text="{x:Static resx:AppResources.Settings}"
                      IconImageSource="SettingsPageViewModel" />
      </DataTemplate>-->

      <!-- Shell.ItemTemplate 是 FlyoutItem 的模板 -->
      <!-- Shell.MenuItemTemplate 是 MenuItem 的模板 -->
      <!-- 这两个模板通常使用同一个 -->
      <!--https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/app-fundamentals/shell/flyout#default-template-for-flyoutitems-->
      <!--<DataTemplate x:Key="AppShellFlyoutItemTemplate" x:DataType="BaseShellItem">
        <Grid x:Name="FlyoutItemLayout"
          HeightRequest="{x:OnPlatform Android=50}"
          ColumnSpacing="{x:OnPlatform UWP=0}"
          RowSpacing="{x:OnPlatform UWP=0}">
          <VisualStateManager.VisualStateGroups>
            <VisualStateGroupList>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=White}" />
                  </VisualState.Setters>
                </VisualState>
                -->
      <!--<VisualState x:Name="Selected">
                  <VisualState.Setters>
                    -->
      <!-- 左侧浮动菜单项(选中)时背景 -->
      <!--
                    <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="White" />
                  </VisualState.Setters>
                </VisualState>-->
      <!--
              </VisualStateGroup>
            </VisualStateGroupList>
          </VisualStateManager.VisualStateGroups>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="{x:OnPlatform Android=54, iOS=50, UWP=Auto}" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>
          <Image x:Name="FlyoutItemImage"
               Source="{Binding FlyoutIcon}"
               VerticalOptions="Center"
               HorizontalOptions="{x:OnPlatform Default=Center, UWP=Start}"
               HeightRequest="{x:OnPlatform Android=24, iOS=22, UWP=16}"
               WidthRequest="{x:OnPlatform Android=24, iOS=22, UWP=16}">
            <Image.Margin>
              <OnPlatform x:TypeArguments="Thickness">
                <OnPlatform.Platforms>
                  <On Platform="UWP"
                            Value="12,0,12,0" />
                </OnPlatform.Platforms>
              </OnPlatform>
            </Image.Margin>
          </Image>
          <Label x:Name="FlyoutItemLabel" 
                 Grid.Column="1"
                 Text="{Binding Title}"
                 FontSize="{x:OnPlatform Android=14, iOS=Small}"
                 HorizontalOptions="{x:OnPlatform UWP=Start}"
                 HorizontalTextAlignment="{x:OnPlatform UWP=Start}"
                 FontAttributes="{x:OnPlatform iOS=Bold}"
                 TextColor="{DynamicResource ShellTitleColor}"
                 VerticalTextAlignment="Center">
            -->
      <!--<Label.TextColor>
              <OnPlatform x:TypeArguments="Color">
                <OnPlatform.Platforms>
                  <On Platform="Android"
                            Value="#D2000000" />
                </OnPlatform.Platforms>
              </OnPlatform>
            </Label.TextColor>-->
      <!--<Label.Margin>
            <OnPlatform x:TypeArguments="Thickness">
              <OnPlatform.Platforms>
                <On Platform="Android"
                            Value="20, 0, 0, 0" />
              </OnPlatform.Platforms>
            </OnPlatform>
          </Label.Margin>-->
      <!--
            <Label.FontFamily>
              <OnPlatform x:TypeArguments="x:String">
                <OnPlatform.Platforms>
                  <On Platform="Android"
                            Value="sans-serif-medium" />
                </OnPlatform.Platforms>
              </OnPlatform>
            </Label.FontFamily>
          </Label>
        </Grid>
      </DataTemplate>-->
    </ResourceDictionary>
  </Shell.Resources>
  <!--<Shell.FlyoutHeaderTemplate>
    <DataTemplate>
      <StackLayout Padding="16" Orientation="Horizontal">
        <StackLayout.GestureRecognizers>
          <TapGestureRecognizer Tapped="OnFlyoutHeaderTapped" />
        </StackLayout.GestureRecognizers>
        <Image
                    HeightRequest="64"
                    Source="avatar_default"
                    WidthRequest="64" />
        <Label
                    Margin="16,0,0,0"
                    FontSize="16"
                    LineBreakMode="TailTruncation"
                    MaxLines="2"
                    Text="{x:Static resx:AppResources.User_UnLogin}"
                    TextColor="{DynamicResource ShellTitleColor}"
                    VerticalTextAlignment="Center" />
      </StackLayout>
    </DataTemplate>
  </Shell.FlyoutHeaderTemplate>-->
  <!--
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
  <!--<FlyoutItem Title="{x:Static resx:AppResources.CommunityFix}"
              Icon="CommunityProxyPageViewModel"
              BindingContext="{x:Binding Path=CommunityProxyPage,Mode=OneWay}">
    <ShellContent Route="CommunityProxyPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>
  <FlyoutItem Title="{x:Static resx:AppResources.ScriptConfig}"
              Icon="ProxyScriptManagePageViewModel"
              BindingContext="{x:Binding Path=ProxyScriptPage,Mode=OneWay}">
    <ShellContent Route="ProxyScriptManagePage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>
  <FlyoutItem Title="{x:Static resx:AppResources.GameList}"
              Icon="GameListPageViewModel"
              BindingContext="{x:Binding Path=GameListPage,Mode=OneWay}">
    <ShellContent Route="GameListPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>
  <FlyoutItem Title="{x:Static resx:AppResources.LocalAuth}"
              Icon="LocalAuthPageViewModel"
              BindingContext="{x:Binding Path=LocalAuthPage,Mode=OneWay}">
    <ShellContent Route="LocalAuthPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>
  <FlyoutItem Title="{x:Static resx:AppResources.ArchiSteamFarmPlus}"
              Icon="ArchiSteamFarmPlusPageViewModel"
              BindingContext="{x:Binding Path=ASFPage,Mode=OneWay}">
    <ShellContent Route="ArchiSteamFarmPlusPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>

  <MenuItem
          Text="{x:Static resx:AppResources.Settings}"
          IconImageSource="SettingsPageViewModel" />
  <FlyoutItem Title="{x:Static resx:AppResources.Settings}"
              Icon="SettingsPageViewModel"
              BindingContext="{Binding Mode=OneWay,Source={x:Static vm:SettingsPageViewModel.Instance}}">
    <ShellContent Route="SettingsPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
  </FlyoutItem>-->
  <!--<OnPlatform>
    <On Platform="Android">
      <MenuItem
          Text="{x:Static resx:AppResources.Settings}"
          IconImageSource="SettingsPageViewModel" />
    </On>
    <On>

    </On>
  </OnPlatform>
  <OnPlatform>
    <On Platform="Android">
    </On>
    <On>
      <FlyoutItem Title="{x:Static resx:AppResources.About}"
              Icon="AboutPageViewModel"
              BindingContext="{Binding Mode=OneWay,Source={x:Static vm:AboutPageViewModel.Instance}}">
        <ShellContent Route="AboutPage"
                  ContentTemplate="{DataTemplate local:UnderConstructionPage}" />
      </FlyoutItem>
    </On>
  </OnPlatform>-->

  <!--  When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
  <!--<MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
    </MenuItem>-->

  <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where
        you don't want users to be able to navigate away from. If you would like to navigate to this
        content you can do so by calling
        await Shell.Current.GoToAsync("//LoginPage");
    -->
  <!--<TabBar>
    <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
  </TabBar>-->

  <!-- Optional Templates
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
