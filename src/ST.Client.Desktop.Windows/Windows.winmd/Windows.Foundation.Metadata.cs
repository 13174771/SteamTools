// This file was generated by cswinrt.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Foundation.Metadata
{
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ActivatableAttribute: Attribute
    {
        public ActivatableAttribute(uint version){}
        public ActivatableAttribute(uint version, string type){}
        public ActivatableAttribute(uint version, Platform platform){}
        public ActivatableAttribute(Type type, uint version){}
        public ActivatableAttribute(Type type, uint version, string contractName){}
        public ActivatableAttribute(Type type, uint version, Platform platform){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class AllowForWebAttribute: Attribute
    {
        public AllowForWebAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class AllowMultipleAttribute: Attribute
    {
        public AllowMultipleAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Enum, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ApiContractAttribute: Attribute
    {
        public ApiContractAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    public static class ApiInformation
    {

        internal static BaseActivationFactory _factory = new BaseActivationFactory("Windows.Foundation.Metadata", "Windows.Foundation.Metadata.ApiInformation");
        public static I As<I>() => _factory.AsInterface<I>();

        internal class _IApiInformationStatics : IWinRTObject
        {
            private IObjectReference _obj;
            public _IApiInformationStatics()
            {
                _obj = (new BaseActivationFactory("Windows.Foundation.Metadata", "Windows.Foundation.Metadata.ApiInformation"))._As(GuidGenerator.GetIID(typeof(Windows.Foundation.Metadata.IApiInformationStatics).GetHelperType()));
            }

            private static readonly WeakLazy<_IApiInformationStatics> _instance = new WeakLazy<_IApiInformationStatics>();
            internal static IApiInformationStatics Instance => (IApiInformationStatics)_instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsTypePresent(string typeName) => _IApiInformationStatics.Instance.IsTypePresent(typeName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsMethodPresent(string typeName, string methodName) => _IApiInformationStatics.Instance.IsMethodPresent(typeName, methodName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsMethodPresent(string typeName, string methodName, uint inputParameterCount) => _IApiInformationStatics.Instance.IsMethodPresent(typeName, methodName, inputParameterCount);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsEventPresent(string typeName, string eventName) => _IApiInformationStatics.Instance.IsEventPresent(typeName, eventName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsPropertyPresent(string typeName, string propertyName) => _IApiInformationStatics.Instance.IsPropertyPresent(typeName, propertyName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsReadOnlyPropertyPresent(string typeName, string propertyName) => _IApiInformationStatics.Instance.IsReadOnlyPropertyPresent(typeName, propertyName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsWriteablePropertyPresent(string typeName, string propertyName) => _IApiInformationStatics.Instance.IsWriteablePropertyPresent(typeName, propertyName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsEnumNamedValuePresent(string enumTypeName, string valueName) => _IApiInformationStatics.Instance.IsEnumNamedValuePresent(enumTypeName, valueName);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsApiContractPresent(string contractName, ushort majorVersion) => _IApiInformationStatics.Instance.IsApiContractPresent(contractName, majorVersion);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static bool IsApiContractPresent(string contractName, ushort majorVersion, ushort minorVersion) => _IApiInformationStatics.Instance.IsApiContractPresent(contractName, majorVersion, minorVersion);
    }[global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 262144u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.19041.0")]
    public sealed class AttributeNameAttribute: Attribute
    {
        public AttributeNameAttribute(string A_0){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ComposableAttribute: Attribute
    {
        public ComposableAttribute(Type type, CompositionType compositionType, uint version){}
        public ComposableAttribute(Type type, CompositionType compositionType, uint version, Platform platform){}
        public ComposableAttribute(Type type, CompositionType compositionType, uint version, string contract){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum CompositionType : int
    {
        Protected = unchecked((int)0x1),
        Public = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Event | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.All, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ContractVersionAttribute: Attribute
    {
        public ContractVersionAttribute(uint version){}
        public ContractVersionAttribute(Type contract, uint version){}
        public ContractVersionAttribute(string contract, uint version){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
    public sealed class CreateFromStringAttribute: Attribute
    {
        public CreateFromStringAttribute(){}
        public string MethodName;
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DefaultAttribute: Attribute
    {
        public DefaultAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DefaultOverloadAttribute: Attribute
    {
        public DefaultOverloadAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Event | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DeprecatedAttribute: Attribute
    {
        public DeprecatedAttribute(string message, DeprecationType type, uint version){}
        public DeprecatedAttribute(string message, DeprecationType type, uint version, Platform platform){}
        public DeprecatedAttribute(string message, DeprecationType type, uint version, string contract){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum DeprecationType : int
    {
        Deprecate = unchecked((int)0),
        Remove = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DualApiPartitionAttribute: Attribute
    {
        public DualApiPartitionAttribute(){}
        public uint version;
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Interface, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ExclusiveToAttribute: Attribute
    {
        public ExclusiveToAttribute(Type typeName){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ExperimentalAttribute: Attribute
    {
        public ExperimentalAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 262144u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.19041.0")]
    public sealed class FastAbiAttribute: Attribute
    {
        public FastAbiAttribute(uint version){}
        public FastAbiAttribute(uint version, Platform platform){}
        public FastAbiAttribute(uint version, string contractName){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.All, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 196608u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.15063.0")]
    public sealed class FeatureAttribute: Attribute
    {
        public FeatureAttribute(FeatureStage featureStage, bool validInAllBranches){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 196608u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.15063.0")]
    public enum FeatureStage : int
    {
        AlwaysDisabled = unchecked((int)0),
        DisabledByDefault = unchecked((int)0x1),
        EnabledByDefault = unchecked((int)0x2),
        AlwaysEnabled = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum GCPressureAmount : int
    {
        Low = unchecked((int)0),
        Medium = unchecked((int)0x1),
        High = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class GCPressureAttribute: Attribute
    {
        public GCPressureAttribute(){}
        public GCPressureAmount amount;
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Interface, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class GuidAttribute: Attribute
    {
        public GuidAttribute(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class HasVariantAttribute: Attribute
    {
        public HasVariantAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [global::System.Runtime.InteropServices.Guid("997439FE-F681-4A11-B416-C13A47E8BA36")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    internal interface IApiInformationStatics
    {
        bool IsTypePresent(string typeName);
        [Windows.Foundation.Metadata.Overload("IsMethodPresent")]
        bool IsMethodPresent(string typeName, string methodName);
        [Windows.Foundation.Metadata.Overload("IsMethodPresentWithArity")]
        bool IsMethodPresent(string typeName, string methodName, uint inputParameterCount);
        bool IsEventPresent(string typeName, string eventName);
        bool IsPropertyPresent(string typeName, string propertyName);
        bool IsReadOnlyPropertyPresent(string typeName, string propertyName);
        bool IsWriteablePropertyPresent(string typeName, string propertyName);
        bool IsEnumNamedValuePresent(string enumTypeName, string valueName);
        [Windows.Foundation.Metadata.Overload("IsApiContractPresentByMajor")]
        bool IsApiContractPresent(string contractName, ushort majorVersion);
        [Windows.Foundation.Metadata.Overload("IsApiContractPresentByMajorAndMinor")]
        bool IsApiContractPresent(string contractName, ushort majorVersion, ushort minorVersion);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Struct, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class InternalAttribute: Attribute
    {
        public InternalAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class LengthIsAttribute: Attribute
    {
        public LengthIsAttribute(int indexLengthParameter){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class MarshalingBehaviorAttribute: Attribute
    {
        public MarshalingBehaviorAttribute(MarshalingType behavior){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum MarshalingType : int
    {
        None = unchecked((int)0x1),
        Agile = unchecked((int)0x2),
        Standard = unchecked((int)0x3),
        InvalidMarshaling = unchecked((int)0),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Interface | AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class MetadataMarshalAttribute: Attribute
    {
        public MetadataMarshalAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class MuseAttribute: Attribute
    {
        public MuseAttribute(){}
        public uint Version;
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 262144u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.19041.0")]
    public sealed class NoExceptionAttribute: Attribute
    {
        public NoExceptionAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class OverloadAttribute: Attribute
    {
        public OverloadAttribute(string method){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class OverridableAttribute: Attribute
    {
        public OverridableAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum Platform : int
    {
        Windows = unchecked((int)0),
        WindowsPhone = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class PlatformAttribute: Attribute
    {
        public PlatformAttribute(Platform platform){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Event | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.All, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class PreviousContractVersionAttribute: Attribute
    {
        public PreviousContractVersionAttribute(string contract, uint versionLow, uint versionHigh, string newContract){}
        public PreviousContractVersionAttribute(string contract, uint versionLow, uint versionHigh){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ProtectedAttribute: Attribute
    {
        public ProtectedAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class RangeAttribute: Attribute
    {
        public RangeAttribute(int minValue, int maxValue){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class RemoteAsyncAttribute: Attribute
    {
        public RemoteAsyncAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class StaticAttribute: Attribute
    {
        public StaticAttribute(Type type, uint version){}
        public StaticAttribute(Type type, uint version, Platform platform){}
        public StaticAttribute(Type type, uint version, string contractName){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ThreadingAttribute: Attribute
    {
        public ThreadingAttribute(ThreadingModel model){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum ThreadingModel : int
    {
        STA = unchecked((int)0x1),
        MTA = unchecked((int)0x2),
        Both = unchecked((int)0x3),
        InvalidThreading = unchecked((int)0),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class VariantAttribute: Attribute
    {
        public VariantAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Event | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.All, AllowMultiple = true)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class VersionAttribute: Attribute
    {
        public VersionAttribute(uint version){}
        public VersionAttribute(uint version, Platform platform){}
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [AttributeUsage(AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false)]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.FoundationContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class WebHostHiddenAttribute: Attribute
    {
        public WebHostHiddenAttribute(){}
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Foundation.Metadata
{
    [DynamicInterfaceCastableImplementation]
    [global::System.Runtime.InteropServices.Guid("997439FE-F681-4A11-B416-C13A47E8BA36")]
    internal unsafe interface IApiInformationStatics : global::Windows.Foundation.Metadata.IApiInformationStatics
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IApiInformationStatics()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IApiInformationStatics), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 10);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_IsTypePresent_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_IsMethodPresent_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, uint, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_IsMethodPresent_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_IsEventPresent_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_IsPropertyPresent_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_IsReadOnlyPropertyPresent_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_IsWriteablePropertyPresent_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_IsEnumNamedValuePresent_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, ushort, byte*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_IsApiContractPresent_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, ushort, ushort, byte*, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_IsApiContractPresent_9;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsTypePresent_0(IntPtr thisPtr, IntPtr typeName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsTypePresent(MarshalString.FromAbi(typeName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsMethodPresent_1(IntPtr thisPtr, IntPtr typeName, IntPtr methodName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsMethodPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(methodName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsMethodPresent_2(IntPtr thisPtr, IntPtr typeName, IntPtr methodName, uint inputParameterCount, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsMethodPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(methodName), inputParameterCount);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsEventPresent_3(IntPtr thisPtr, IntPtr typeName, IntPtr eventName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsEventPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(eventName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsPropertyPresent_4(IntPtr thisPtr, IntPtr typeName, IntPtr propertyName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsPropertyPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(propertyName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsReadOnlyPropertyPresent_5(IntPtr thisPtr, IntPtr typeName, IntPtr propertyName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsReadOnlyPropertyPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(propertyName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsWriteablePropertyPresent_6(IntPtr thisPtr, IntPtr typeName, IntPtr propertyName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsWriteablePropertyPresent(MarshalString.FromAbi(typeName), MarshalString.FromAbi(propertyName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsEnumNamedValuePresent_7(IntPtr thisPtr, IntPtr enumTypeName, IntPtr valueName, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsEnumNamedValuePresent(MarshalString.FromAbi(enumTypeName), MarshalString.FromAbi(valueName));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsApiContractPresent_8(IntPtr thisPtr, IntPtr contractName, ushort majorVersion, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsApiContractPresent(MarshalString.FromAbi(contractName), majorVersion);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsApiContractPresent_9(IntPtr thisPtr, IntPtr contractName, ushort majorVersion, ushort minorVersion, byte* result)
        {
            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Foundation.Metadata.IApiInformationStatics>(thisPtr).IsApiContractPresent(MarshalString.FromAbi(contractName), majorVersion, minorVersion);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsTypePresent(string typeName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(__typeName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsMethodPresent(string typeName, string methodName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __methodName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __methodName = MarshalString.CreateMarshaler(methodName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__methodName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__methodName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsMethodPresent(string typeName, string methodName, uint inputParameterCount)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __methodName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __methodName = MarshalString.CreateMarshaler(methodName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, uint, out byte, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__methodName), inputParameterCount, out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__methodName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsEventPresent(string typeName, string eventName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __eventName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __eventName = MarshalString.CreateMarshaler(eventName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__eventName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__eventName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsPropertyPresent(string typeName, string propertyName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __propertyName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __propertyName = MarshalString.CreateMarshaler(propertyName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__propertyName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__propertyName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsReadOnlyPropertyPresent(string typeName, string propertyName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __propertyName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __propertyName = MarshalString.CreateMarshaler(propertyName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__propertyName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__propertyName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsWriteablePropertyPresent(string typeName, string propertyName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __typeName = default;
            MarshalString __propertyName = default;
            byte __retval = default;
            try
            {
                __typeName = MarshalString.CreateMarshaler(typeName);
                __propertyName = MarshalString.CreateMarshaler(propertyName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[12](ThisPtr, MarshalString.GetAbi(__typeName), MarshalString.GetAbi(__propertyName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__typeName);
                MarshalString.DisposeMarshaler(__propertyName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsEnumNamedValuePresent(string enumTypeName, string valueName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __enumTypeName = default;
            MarshalString __valueName = default;
            byte __retval = default;
            try
            {
                __enumTypeName = MarshalString.CreateMarshaler(enumTypeName);
                __valueName = MarshalString.CreateMarshaler(valueName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out byte, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(__enumTypeName), MarshalString.GetAbi(__valueName), out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__enumTypeName);
                MarshalString.DisposeMarshaler(__valueName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsApiContractPresent(string contractName, ushort majorVersion)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __contractName = default;
            byte __retval = default;
            try
            {
                __contractName = MarshalString.CreateMarshaler(contractName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, ushort, out byte, int>**)ThisPtr)[14](ThisPtr, MarshalString.GetAbi(__contractName), majorVersion, out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__contractName);
            }
        }

        unsafe bool global::Windows.Foundation.Metadata.IApiInformationStatics.IsApiContractPresent(string contractName, ushort majorVersion, ushort minorVersion)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Foundation.Metadata.IApiInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __contractName = default;
            byte __retval = default;
            try
            {
                __contractName = MarshalString.CreateMarshaler(contractName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, ushort, ushort, out byte, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(__contractName), majorVersion, minorVersion, out __retval));
                return __retval != 0;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__contractName);
            }
        }
    }

}
#pragma warning restore CA1416
