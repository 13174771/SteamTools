<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        Width="800" Height="600" x:Name="u"
        x:Class="System.Application.UI.Views.Windows.AuthTradeWindow"
        xmlns:resx="using:System.Application.UI.Resx"
        xmlns:vm="using:System.Application.UI.ViewModels"
        xmlns:controls="clr-namespace:System.Application.UI.Views.Controls"
        xmlns:ui="using:FluentAvalonia.UI.Controls"
        xmlns:i="using:Avalonia.Xaml.Interactivity"
        xmlns:ia="using:Avalonia.Xaml.Interactions.Core"
        xmlns:ms="using:System.Application.Settings"
        xmlns:gif="using:AvaloniaGif"
        xmlns:wv2="clr-namespace:Avalonia.Controls;assembly=Avalonia.WebView2"
        Background="Transparent"
        
        x:DataType="vm:AuthTradeWindowViewModel"
        x:CompileBindings="True"
        Title="{Binding Title}">
  <Panel HorizontalAlignment="Stretch">
    <controls:TitleBar/>
    <Panel IsVisible="{Binding !IsLoggedIn}">
      <StackPanel VerticalAlignment="Center" Spacing="8" Margin="10,0" Width="250">
        <PathIcon Data="{StaticResource SteamDrawing}" Width="100" Height="100"
                  HorizontalAlignment="Center" Margin="0 0 0 25"></PathIcon>
        <TextBox Watermark="{ReflectionBinding Path=Res.Steam_User,Mode=OneWay,Source={x:Static resx:R.Current}}" Text="{Binding UserName}"></TextBox>

        <TextBox Watermark="{ReflectionBinding Path=Res.Steam_Password,Mode=OneWay,Source={x:Static resx:R.Current}}"
                 PasswordChar="{StaticResource PasswordChar}"
                 Text="{Binding Password}"
                 Classes="revealPasswordButton"></TextBox>

        <Panel Margin="2 0 6 0">
          <CheckBox Content="{ReflectionBinding Path=Res.User_Rememberme,Mode=OneWay,Source={x:Static resx:R.Current}}" IsChecked="{Binding RememberMe}"></CheckBox>
        </Panel>

        <StackPanel IsVisible="{Binding IsRequiresCaptcha}"
                    Orientation="Vertical"
                    HorizontalAlignment="Center"
                    Spacing="10">
          <WrapPanel>
            <gif:Image2 Width="206"
                        Height="37"
                        Stretch="Uniform"
                        Source="{Binding CaptchaImage}"/>
            <Button Content="{ReflectionBinding Path=Res.Steam_ImageCodeShowError,Mode=OneWay,Source={x:Static resx:R.Current}}"
                    Margin="5 0 0 0"
                    Command="{ReflectionBinding CaptchaUrlButton_Click}"/>
          </WrapPanel>
          <TextBox Watermark="{ReflectionBinding Path=Res.Steam_ImageCodeTip,Mode=OneWay,Source={x:Static resx:R.Current}}" Text="{Binding CaptchaText}" MaxWidth="200"></TextBox>
        </StackPanel>

        <Button Content="{ReflectionBinding Path=Res.Login,Mode=OneWay,Source={x:Static resx:R.Current}}"
                HorizontalAlignment="Stretch" HorizontalContentAlignment="Center"
                Command="{ReflectionBinding LoginButton_Click,Mode=OneTime}">
        </Button>
      </StackPanel>
      <TextBlock
          VerticalAlignment="Bottom"
          HorizontalAlignment="Center"
          Margin="0 5"
          Text="{ReflectionBinding Path=Res.LocalAuth_SteamTradeLoginTip,Mode=OneWay,Source={x:Static resx:R.Current}}"
          TextAlignment="Center"
          TextWrapping="WrapWithOverflow"></TextBlock>
    </Panel>

    <Panel HorizontalAlignment="Stretch"
           Margin="{StaticResource TitleBarAfterMargin}"
           IsVisible="{Binding IsLoggedIn}">
      <DockPanel>
        <Border DockPanel.Dock="Top"
                Classes="paper"
                Margin="20 10"
                Padding="10"
                Background="{DynamicResource ThemeBrushKey}">
          <DockPanel>
            <ui:CommandBar DefaultLabelPosition="Right"
                      IsSticky="False">
              <ui:CommandBar.PrimaryCommands>

                <ui:CommandBarButton Label="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_ConfirmAll,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                     Command="{ReflectionBinding ConfirmAllButton_Click,Mode=OneTime}"
                                     IsEnabled="{Binding IsConfirmationsAny}">
                  <ui:CommandBarButton.Icon>
                    <ui:SymbolIcon Symbol="Checkmark"/>
                  </ui:CommandBarButton.Icon>
                </ui:CommandBarButton>

                <ui:CommandBarButton Label="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_CancelAll,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                     Command="{ReflectionBinding CancelAllButton_Click,Mode=OneTime}"
                                     IsEnabled="{Binding IsConfirmationsAny}">
                  <ui:CommandBarButton.Icon>
                    <ui:SymbolIcon Symbol="Cancel"/>
                  </ui:CommandBarButton.Icon>
                </ui:CommandBarButton>

                <ui:CommandBarSeparator/>

                <ui:CommandBarButton Label="{ReflectionBinding Path=Res.Refresh,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Command="{ReflectionBinding Refresh_Click,Mode=OneTime}">
                  <ui:CommandBarButton.Icon>
                    <ui:SymbolIcon Symbol="Refresh"/>
                  </ui:CommandBarButton.Icon>
                </ui:CommandBarButton>

                <ui:CommandBarButton Label="{ReflectionBinding Path=Res.Logout,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Command="{ReflectionBinding Logout_Click,Mode=OneTime}">
                  <ui:CommandBarButton.Icon>
                    <ui:SymbolIcon Symbol="Up"/>
                  </ui:CommandBarButton.Icon>
                </ui:CommandBarButton>
              </ui:CommandBar.PrimaryCommands>
            </ui:CommandBar>
            <!--<StackPanel Spacing="10" Orientation="Horizontal">
              <Button Content="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_ConfirmAll,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Classes="DialogButton"
                      Command="{ReflectionBinding ConfirmAllButton_Click,Mode=OneTime}"
                      IsEnabled="{Binding IsConfirmationsAny}"></Button>
              <Button Content="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_CancelAll,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Classes="DialogButton"
                      Command="{ReflectionBinding CancelAllButton_Click,Mode=OneTime}"
                      IsEnabled="{Binding IsConfirmationsAny}"></Button>
              <Button Content="{ReflectionBinding Path=Res.Refresh,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Command="{ReflectionBinding Refresh_Click,Mode=OneTime}"
                      Classes="DialogButton"></Button>
              <Button Content="{ReflectionBinding Path=Res.Logout,Mode=OneWay,Source={x:Static resx:R.Current}}"
                      Command="{ReflectionBinding Logout_Click,Mode=OneTime}"
                      Classes="DialogButton"></Button>
            </StackPanel>-->
            <TextBlock Text="{Binding ConfirmationsConutMessage}" Grid.Column="1"
                       VerticalAlignment="Center" HorizontalAlignment="Right" FontSize="16"></TextBlock>
          </DockPanel>
        </Border>

        <Panel DockPanel.Dock="Bottom">
          <StackPanel IsVisible="{Binding IsLoading}" VerticalAlignment="Center" Spacing="15" Margin="20 0" x:Name="load">
            <!--<TextBlock x:Name="EmptyTip" IsVisible="{Binding !IsConfirmationsAny}"
                                Text="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_ListNullTip,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                TextWrapping="WrapWithOverflow"
                                VerticalAlignment="Center" HorizontalAlignment="Center">
                        </TextBlock>-->
            <!--<i:Interaction.Behaviors>
                            <ia:DataTriggerBehavior Binding="{Binding IsLoading}" ComparisonCondition="Equal" Value="True">
                                <ia:ChangePropertyAction TargetObject="{Binding #EmptyTip}" PropertyName="IsVisible" Value="False"/>
                                <ia:ChangePropertyAction TargetObject="{Binding #load}" PropertyName="IsVisible" Value="True"/>
                            </ia:DataTriggerBehavior>
                            <ia:DataTriggerBehavior Binding="{Binding IsLoading}" ComparisonCondition="Equal" Value="False">
                                <ia:ChangePropertyAction TargetObject="{Binding #EmptyTip}" PropertyName="IsVisible" Value="True"/>
                                <ia:ChangePropertyAction TargetObject="{Binding #load}" PropertyName="IsVisible" Value="False"/>
                            </ia:DataTriggerBehavior>
                        </i:Interaction.Behaviors>-->
            <ProgressBar
              Width="100"
              Height="100"
              Classes="Circle"
              IsIndeterminate="True" />
            <TextBlock Text="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_GetTip,Mode=OneWay,Source={x:Static resx:R.Current}}" HorizontalAlignment="Center" FontSize="14"></TextBlock>
          </StackPanel>

          <ui:ContentDialog x:Name="HtmlDialog"
                            PrimaryButtonText="{ReflectionBinding Path=Res.Confirm,Mode=OneWay,Source={x:Static resx:R.Current}}">
            <ui:ContentDialog.Content>
              <controls:WebView2Compat x:Name="webview"
                            MinWidth="400"
                            MinHeight="400"/>
            </ui:ContentDialog.Content>
          </ui:ContentDialog>

          <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                        VerticalScrollBarVisibility="Auto"
                        Padding="0 0 0 10">
            <ItemsRepeater Items="{Binding Confirmations,Mode=OneWay}">
              <ItemsRepeater.Layout>
                <StackLayout Orientation="Vertical" Spacing="10"></StackLayout>
              </ItemsRepeater.Layout>
              <ItemsRepeater.ItemTemplate>
                <DataTemplate>
                  <Panel x:Name="panel" MinWidth="100" Margin="20 0">
                    <Border x:Name="card"
                            Classes="paper"
                            Background="{DynamicResource ThemeBrushKey}">
                      <Grid Width="{ReflectionBinding #panel.Width}"
                            ColumnDefinitions="Auto,*,Auto">
                        <Panel>
                          <gif:Image2 Width="128"
                                 Height="128"
                                 Stretch="None"
                                 Margin="10 0"
                                 Source="{Binding Image}"/>
                        </Panel>
                        <Panel Grid.Column="1" Margin="10,5">
                          <StackPanel>
                            <DockPanel LastChildFill="True">
                              <TextBlock Text="{Binding Details}"
                                         Classes="h4"
                                         Foreground="{DynamicResource HighlightForegroundBrushKey}"
                                         TextWrapping="Wrap" />
                            </DockPanel>

                            <TextBlock Text="{Binding Traded}" Classes="h6" Foreground="{DynamicResource InactiveForegroundBrushKey}"/>
                            <TextBlock Text="{Binding When}" Classes="h6" Foreground="{DynamicResource InactiveForegroundBrushKey}"/>
                          </StackPanel>
                        </Panel>
                        <Grid Grid.Column="3" RowDefinitions="*,Auto">
                          <Panel>
                            <TextBlock x:Name="OperateText"
                                       IsVisible="{Binding IsOperate}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="16"
                                       Margin="0 0 10 0">
                              <i:Interaction.Behaviors>
                                <ia:DataTriggerBehavior Binding="{Binding IsOperate}" ComparisonCondition="Equal" Value="1">
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperateText}" PropertyName="Text" Value="{ReflectionBinding Path=Res.Confirmed,Mode=OneWay,Source={x:Static resx:R.Current}}"/>
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperatePanel}" PropertyName="IsVisible" Value="False"/>
                                </ia:DataTriggerBehavior>
                                <ia:DataTriggerBehavior Binding="{Binding IsOperate}" ComparisonCondition="Equal" Value="2">
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperateText}" PropertyName="Text" Value="{ReflectionBinding Path=Res.Cancelled,Mode=OneWay,Source={x:Static resx:R.Current}}"/>
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperatePanel}" PropertyName="IsVisible" Value="False"/>
                                </ia:DataTriggerBehavior>
                                <ia:DataTriggerBehavior Binding="{Binding IsOperate}" ComparisonCondition="Equal" Value="0">
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperateText}" PropertyName="IsVisible" Value="False"/>
                                  <ia:ChangePropertyAction TargetObject="{ReflectionBinding #OperatePanel}" PropertyName="IsVisible" Value="True"/>
                                </ia:DataTriggerBehavior>
                              </i:Interaction.Behaviors>
                            </TextBlock>
                          </Panel>
                          <StackPanel Grid.Row="1"
                                      Orientation="Horizontal"
                                      IsVisible="True"
                                      x:Name="OperatePanel">
                            <Border BorderBrush="{DynamicResource SemiactiveBackgroundBrushKey}"
                                    ToolTip.Tip="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_Confirm,Mode=OneWay,Source={x:Static resx:R.Current}}">
                              <Button Classes="flatbutton"
                                      Cursor="Hand"
                                      Content="{ReflectionBinding Path=Res.SeeDetails,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                      HorizontalAlignment="Stretch"
                                      Background="{DynamicResource ThemeBrushKey}"
                                      Click="ShowHtmlDialog_Click"
                                      Tag="{Binding}"></Button>
                            </Border>
                            <Border BorderBrush="{DynamicResource SemiactiveBackgroundBrushKey}"
                                    ToolTip.Tip="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_Confirm,Mode=OneWay,Source={x:Static resx:R.Current}}">
                              <Button Classes="flatbutton"
                                      Cursor="Hand"
                                      IsEnabled="{Binding ButtonEnable}"
                                      Content="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_Confirm,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                      HorizontalAlignment="Stretch"
                                      Background="{DynamicResource ThemeBrushKey}"
                                      Command="{ReflectionBinding #u.DataContext.ConfirmTrade_Click}"
                                      CommandParameter="{Binding}"></Button>
                            </Border>
                            <Border BorderBrush="{DynamicResource SemiactiveBackgroundBrushKey}"
                                    ToolTip.Tip="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_Cancel,Mode=OneWay,Source={x:Static resx:R.Current}}">
                              <Button Classes="flatbutton"
                                      Cursor="Hand"
                                      IsEnabled="{Binding ButtonEnable}"
                                      Content="{ReflectionBinding Path=Res.LocalAuth_AuthTrade_Cancel,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                      Background="{DynamicResource ThemeBrushKey}"
                                      HorizontalAlignment="Stretch"
                                      Command="{ReflectionBinding #u.DataContext.CancelTrade_Click}"
                                      CommandParameter="{Binding}"></Button>
                            </Border>
                          </StackPanel>
                        </Grid>
                      </Grid>
                    </Border>
                  </Panel>
                </DataTemplate>
              </ItemsRepeater.ItemTemplate>
            </ItemsRepeater>
          </ScrollViewer>
        </Panel>
      </DockPanel>
    </Panel>

    <!--Toast-->
    <controls:ToastMessage />
  </Panel>
</Window>
