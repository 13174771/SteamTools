<Styles
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:resx="using:System.Application.UI.Resx">
    <Design.PreviewWith>
        <Border Padding="20">
            <StackPanel Spacing="5">
                <TextBox />
                <TextBox Text="Hello Down there" />
                <TextBox Watermark="Watermark" />
                <TextBox IsEnabled="False" Text="Test" />
                <TextBox Classes="clearButton" Text="Test Clear" />
                <TextBox
                    Classes="revealPasswordButton"
                    PasswordChar="{StaticResource PasswordChar}"
                    Text="Test Password" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>
    <Styles.Resources>
        <FontFamily x:Key="UnicodeFont">avares://System.Application.SteamTools.Client.Avalonia/Application/UI/Assets/Fonts#WenQuanYi Micro Hei</FontFamily>

        <Thickness x:Key="TextBoxIconMargin">12,0,0,0</Thickness>

        <!--<MenuFlyout x:Key="DefaultTextBoxContextMenu" x:Name="TextBoxContextMenu">-->
        <MenuFlyout x:Key="DefaultTextBoxContextFlyout">
            <MenuItem
                x:Name="TextBoxContextMenuCutItem"
                Command="{Binding $parent[TextBox].Cut}"
                Header="{ReflectionBinding Path=Res.Cut,
                                           Mode=OneWay,
                                           Source={x:Static resx:R.Current}}"
                InputGesture="{x:Static TextBox.CutGesture}"
                IsEnabled="{Binding $parent[TextBox].CanCut}" />
            <MenuItem
                x:Name="TextBoxContextMenuCopyItem"
                Command="{Binding $parent[TextBox].Copy}"
                Header="{ReflectionBinding Path=Res.Copy,
                                           Mode=OneWay,
                                           Source={x:Static resx:R.Current}}"
                InputGesture="{x:Static TextBox.CopyGesture}"
                IsEnabled="{Binding $parent[TextBox].CanCopy}" />
            <MenuItem
                x:Name="TextBoxContextMenuPasteItem"
                Command="{Binding $parent[TextBox].Paste}"
                Header="{ReflectionBinding Path=Res.Paste,
                                           Mode=OneWay,
                                           Source={x:Static resx:R.Current}}"
                InputGesture="{x:Static TextBox.PasteGesture}"
                IsEnabled="{Binding $parent[TextBox].CanPaste}" />
            <MenuItem Header="-" />
            <MenuItem
                x:Name="TextBoxContextMenuSelectAllItem"
                Command="{Binding $parent[TextBox].SelectAll}"
                Header="{ReflectionBinding Path=Res.SelectAll,
                                           Mode=OneWay,
                                           Source={x:Static resx:R.Current}}"
                InputGesture="Ctrl + A"
                IsEnabled="{Binding $parent[TextBox].Text, Converter={StaticResource IsNullConverter}, ConverterParameter=invert}" />
        </MenuFlyout>
    </Styles.Resources>

    <Style Selector="PathIcon.TextBoxIcon">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="{StaticResource TextBoxIconMargin}" />
    </Style>

    <Style Selector="TextBox">
        <!--<Setter Property="FontFamily" Value="Microsoft YaHei UI,Microsoft YaHei,Simsun,苹方-简,宋体-简"></Setter>-->
        <!--<Setter Property="FontFamily" Value="{StaticResource UnicodeFont}" />-->
        <Setter Property="ContextMenu" Value="{x:Null}" />
        <Setter Property="ContextFlyout" Value="{StaticResource DefaultTextBoxContextFlyout}" />

        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <!--
                            This is flipped (scaleY(-1)) for the elevation brush effect
                        -->
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            RenderTransform="scaleY(-1)" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    Grid.ColumnSpan="1"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                <DockPanel
                                    x:Name="PART_InnerDockPanel"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="1"
                                    Margin="{TemplateBinding Padding}">
                                    <TextBlock
                                        Name="PART_FloatingWatermark"
                                        DockPanel.Dock="Top"
                                        FontSize="{TemplateBinding FontSize}"
                                        Foreground="{DynamicResource SystemAccentColor}"
                                        Text="{TemplateBinding Watermark}" />
                                    <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}" VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                IsHitTestVisible="False"
                                                IsVisible="{TemplateBinding Text,
                                                                            Converter={x:Static StringConverters.IsNullOrEmpty}}"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                FontFamily="{StaticResource UnicodeFont}"
                                                PasswordChar="{TemplateBinding PasswordChar}"
                                                RevealPassword="{TemplateBinding RevealPassword}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                    </ScrollViewer>
                                </DockPanel>
                                <ContentPresenter
                                    Grid.Column="2"
                                    Grid.ColumnSpan="1"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>
    </Style>

    <Style Selector="TextBox[AcceptsReturn=False]">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--<Style Selector="TextBox /template/ Border#PART_BorderElement">
    <Setter Property="CornerRadius" Value="0" />
  </Style>

    -->
    <!--  TODO: temporary fix to prevent layout issue when error occurs  -->
    <!--
  <Style Selector="TextBox /template/ DataValidationErrors">
    <Setter Property="MinHeight" Value="20" />
  </Style>

  <Style Selector="TextBox:not(.hasCheckMark) /template/ PathIcon.checkMark.checkMarkDataValidation">
    <Setter Property="IsVisible" Value="False" />
  </Style>

  <Style Selector="TextBox.hasCheckMark /template/ PathIcon.checkMark.checkMarkDataValidation">
    <Setter Property="IsVisible" Value="True" />
  </Style>

  <Style Selector="TextBox:not(.hasCheckMarkBoolean) /template/ PathIcon.checkMark.checkMarkBoolean">
    <Setter Property="IsVisible" Value="False" />
  </Style>

  <Style Selector="TextBox.hasCheckMarkBoolean /template/ PathIcon.checkMark.checkMarkBoolean">
    <Setter Property="IsVisible" Value="True" />
  </Style>

  <Style Selector="TextBox.selectable_text_block">
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="ContextMenu">
      <ContextMenu>
        <MenuItem Header="Copy" Command="{Binding $parent[TextBox].Copy}" IsEnabled="{Binding $parent[TextBox].CanCopy}" InputGesture="{x:Static TextBox.CopyGesture}"/>
      </ContextMenu>
    </Setter>
    <Setter Property="Template">
      <ControlTemplate>
        <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                      VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
          <Panel>
            <TextPresenter Name="PART_TextPresenter"
                           Text="{TemplateBinding Text, Mode=TwoWay}"
                           CaretIndex="{TemplateBinding CaretIndex}"
                           SelectionStart="{TemplateBinding SelectionStart}"
                           SelectionEnd="{TemplateBinding SelectionEnd}"
                           TextAlignment="{TemplateBinding TextAlignment}"
                           TextWrapping="{TemplateBinding TextWrapping}"
                           PasswordChar="{TemplateBinding PasswordChar}"
                           RevealPassword="{TemplateBinding RevealPassword}"
                           SelectionBrush="{TemplateBinding SelectionBrush}"
                           SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                           CaretBrush="{TemplateBinding CaretBrush}"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Panel>
        </ScrollViewer>
      </ControlTemplate>
    </Setter>
  </Style>-->

    <Style Selector="TextBox.revealPasswordButton[AcceptsReturn=False]:not(TextBox:empty)">
        <Setter Property="InnerRightContent">
            <Template>
                <ToggleButton Classes="passwordBoxRevealButton" IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}" />
            </Template>
        </Setter>
    </Style>


    <Style Selector="TextBox.readonlybox">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style Selector="TextBox.readonlybox:pointerover /template/ Border#PART_BorderElement">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style Selector="TextBox.readonlybox:focus  /template/ Border#PART_BorderElement">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
</Styles>
